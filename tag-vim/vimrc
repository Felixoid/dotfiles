" Plug sources
source ~/.vim/plugrc.vim

" GVIM
if has('gui_running')
  lcd %:p:h
  set guifont=Monaco\ for\ Powerline\ 11
endif

" theming
try
  colorscheme jellybeans
catch /Cannot find color scheme/
  silent echo ''
endtry
set list
set listchars=tab:\|â€”,trail:~
set cursorline
set hlsearch
" <c-/> for switch highlight
nnoremap  :nohlsearch <CR>
filetype plugin on
syntax on
set number
set relativenumber
augroup vimrc
  au InsertEnter * silent! set norelativenumber
  au InsertLeave * silent! set relativenumber
augroup END
set linebreak
highlight lCursor guifg=Red guibg=Cyan ctermfg=Red ctermbg=Cyan
highlight Folded ctermbg=black
highlight Normal ctermbg=none
highlight NonText ctermbg=none

" cache dir, token from archlinux.vim
" Move temporary files to a secure location to protect against CVE-2017-1000382
if exists('$XDG_CACHE_HOME')
  let &g:directory=$XDG_CACHE_HOME
else
  let &g:directory=$HOME . '/.cache'
endif
let g:netrw_home = &g:directory . '/vim'
let &g:undodir=&g:directory . '/vim/undo//'
let &g:backupdir=&g:directory . '/vim/backup//'
let &g:directory.='/vim/swap//'
" Create directories if they doesn't exist
if ! isdirectory(expand(&g:directory))
  silent! call mkdir(expand(&g:directory), 'p', 0700)
endif
if ! isdirectory(expand(&g:backupdir))
  silent! call mkdir(expand(&g:backupdir), 'p', 0700)
endif
if ! isdirectory(expand(&g:undodir))
  silent! call mkdir(expand(&g:undodir), 'p', 0700)
endif

" tabulation
set autoindent
set expandtab
set ts=4
set sw=2
set sts=2

" New diff way
if has('patch-8.1.0360')
  set diffopt+=algorithm:patience,indent-heuristic
end

" function to change file encoding
function! ChangeFileencoding()
  let encodings = ['cp1251', 'koi8-r', 'cp866', 'utf8']
  let prompt_encs = []
  let index = 0
  while index < len(encodings)
    call add(prompt_encs, index.'. '.encodings[index])
    let index = index + 1
  endwhile
  let choice = inputlist(prompt_encs)
  if choice >= 0 && choice < len(encodings)
    execute 'e ++enc='.encodings[choice].' %:p'
  endif
endf
nmap <F8> :call ChangeFileencoding()<CR>

" toggles maps
nmap <F7> :set number! relativenumber!<CR>
nmap <leader>tT :set expandtab!<CR>
nmap <leader>tP :set paste!<CR>

set keymap=russian-jcukenwin
set iminsert=0
set imsearch=0
set scrolloff=3
set incsearch
set tabpagemax=40
set history=1000
imap <C-space> 

" Copy and paste to and from xclip
nmap <leader>y "*y
nmap <leader>p "*p
nmap <leader>Y "*Y
nmap <leader>P "*P

"setlocal spell spelllang=ru_yo,en_us
set nospell

" YaML
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" Airline
let g:airline_theme='base16_ashes'
set laststatus=2
let g:airline#extensions#vimagit#enabled=1
let g:airline#extensions#branch#enabled=1
let g:airline#extensions#keymap#enabled=0
" more compact position section
let g:airline_section_z="%1p%%%#__accent_bold#%{g:airline_symbols.linenr}%2l/%L%{g:airline_symbols.maxlinenr}%#__restore__#:%2v"

" Auto-pair
let g:AutoPairsShortcutJump='<S-Tab>'

" Rainbow
let g:rainbow_active = 1
let g:rainbow_operators = 1
set clipboard-=autoselect

" NERDTree
let g:NERDTreeWinSize=22
let g:nerdtree_tabs_open_on_console_startup = 1
let g:nerdtree_tabs_smart_startup_focus = 2
let g:nerdtree_tabs_focus_on_files = 1
autocmd FileType gitrebase let g:nerdtree_tabs_open_on_console_startup = 0

" pymode
let g:pymode_rope = 0 " using YouCompleteMe instead of rope
let g:pymode_lint = 1
if has('python3') && executable('python3')
  let g:pymode_python = 'python3'
elseif has('python') && executable('python')
  let g:pymode_python = 'python'
endif
au FileType python setlocal wrap

" jedi-vim
let g:jedi#use_tabs_not_buffers = 1 " open every goto in tabs

" vim-go
au FileType go set noexpandtab
au FileType go set ts=4
au FileType go set sw=4
au FileType go set sts=4
au FileType go nmap <Leader>r <Plug>(go-run)
au FileType go nmap <Leader>b :GoBuild!<CR>
au FileType go nmap <Leader>t <Plug>(go-test)
au FileType go nmap <Leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gt <Plug>(go-doc-tab)

" vim-gutentags
set tags+=tags;/
let g:gutentags_add_default_project_roots = 0
let g:gutentags_project_root = ['tags']
if exists('*gutentags#statusline')
  set statusline+=%{gutentags#statusline()}
endif

" CtrlP
noremap      :CtrlPTag<cr>
nnoremap <c-]> :CtrlPtjump<cr>

" puppet
" see ~/.vim/after/plugin/puppet-tabular.vim
au FileType puppet set expandtab
au FileType puppet set ts=4
au FileType puppet set sw=4
au FileType puppet set sts=4

" syntastic
let g:syntastic_check_on_open = 1

" ALE
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_text_changed = 0
" only use linters that uses compile_commands.json
let g:ale_linters = {'cpp': ['clangcheck']}

" YouCompleteMe
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_python_binary_path = 'python3'
let g:ycm_key_list_select_completion = []
let g:ycm_key_list_previous_completion = []
let g:ycm_goto_buffer_command = 'new-tab'
nnoremap <leader>gt :YcmCompleter GoTo<CR>

" UtilSnippet
" I would like to ignore ultisnips launch worning
let g:UltiSnipsNoPythonWarning = 1

" vimtex for LaTeX
if exists('g:vimtex#re#youcompleteme')
  if !exists('g:ycm_semantic_triggers')
    let g:ycm_semantic_triggers = {}
  endif
  let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme
endif
