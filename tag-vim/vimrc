" Plug sources
source ~/.vim/plugrc.vim

" GVIM
if has('gui_running')
  lcd %:p:h
  set guifont=Monaco\ for\ Powerline\ 11
endif

" theming
try
  colorscheme jellybeans
catch /Cannot find color scheme/
  silent echo ''
endtry
set list
set listchars=tab:\|â€”,trail:~
set cursorline
set hlsearch
" <c-/> for switch highlight
nnoremap  :nohlsearch <CR>
filetype plugin on
syntax on
set number
set relativenumber
set linebreak
highlight lCursor guifg=Red guibg=Cyan ctermfg=Red ctermbg=Cyan
highlight Folded ctermbg=black
highlight Normal ctermbg=none
highlight NonText ctermbg=none

" tabulation
set autoindent
set expandtab
set ts=4
set sw=2
set sts=2

" Airline
let g:airline_theme='base16_ashes'
set laststatus=2
let g:airline#extensions#vimagit#enabled=1
let g:airline#extensions#branch#enabled=1
let g:airline#extensions#keymap#enabled=0
" more compact position section
let g:airline_section_z="%1p%%%#__accent_bold#%{g:airline_symbols.linenr}%2l%#__restore__#%#__accent_bold#/%L%{g:airline_symbols.maxlinenr}%#__restore__#:%2v"

" Rainbow
let g:rainbow_active = 1
let g:rainbow_operators = 1
set clipboard-=autoselect

" NERDTree
let g:NERDTreeWinSize=22
let g:nerdtree_tabs_open_on_console_startup = 1
let g:nerdtree_tabs_smart_startup_focus = 2
let g:nerdtree_tabs_focus_on_files = 1

" function to change file encoding
function! ChangeFileencoding()
  let encodings = ['cp1251', 'koi8-r', 'cp866', 'utf8']
  let prompt_encs = []
  let index = 0
  while index < len(encodings)
    call add(prompt_encs, index.'. '.encodings[index])
    let index = index + 1
  endwhile
  let choice = inputlist(prompt_encs)
  if choice >= 0 && choice < len(encodings)
    execute 'e ++enc='.encodings[choice].' %:p'
  endif
endf
nmap <F8> :call ChangeFileencoding()<CR>

" toggles maps
nmap <F7> :set number! relativenumber!<CR>
nmap <leader>T :set expandtab!<CR>
nmap <leader>P :set paste!<CR>

set keymap=russian-jcukenwin
set iminsert=0
set imsearch=0
set scrolloff=3
set incsearch
set tabpagemax=40
set history=1000
imap  
"setlocal spell spelllang=ru_yo,en_us
set nospell

" pymode
let g:pymode_rope = 0 " using YouCompleteMe instead of rope
let g:pymode_lint_ignore="E501" " ignore 'too long lines'
let g:pymode_lint = 1
let g:pymode_python = 'python3'
au FileType python setlocal wrap

" vim-go
au FileType go set noexpandtab
au FileType go set ts=4
au FileType go set sw=4
au FileType go set sts=4
" au FileType go let g:go_snippet_engine = "neosnippet"
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b :GoBuild!<CR>
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gt <Plug>(go-doc-tab)

" vim-gutentags
set tags+=tags;/
let g:gutentags_add_default_project_roots = 0
let g:gutentags_project_root = ['tags']
if exists('*gutentags#statusline')
  set statusline+=%{gutentags#statusline()}
endif

" CtrlP
noremap      :CtrlPTag<cr>
nnoremap <c-]> :CtrlPtjump<cr>

" puppet
" see ~/.vim/after/plugin/puppet-tabular.vim
au FileType puppet set expandtab
au FileType puppet set ts=4
au FileType puppet set sw=4
au FileType puppet set sts=4

" syntastic
let g:syntastic_check_on_open = 1

" YouCompleteMe
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_python_binary_path = 'python3'
let g:ycm_key_list_select_completion = []
let g:ycm_key_list_previous_completion = []

" UtilSnippet

" vimtex for LaTeX
if exists('g:vimtex#re#youcompleteme')
  if !exists('g:ycm_semantic_triggers')
    let g:ycm_semantic_triggers = {}
  endif
  let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme
endif
